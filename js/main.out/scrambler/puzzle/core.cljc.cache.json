["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$scrambler.puzzle.core","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$solved-puzzle",["^ ","^5","~$scrambler.puzzle.core/solved-puzzle","~:file","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","~:line",10,"~:column",1,"~:end-line",10,"~:end-column",19,"~:meta",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",10,"^@",6,"^A",10,"^B",19],"~:doc","A solved puzzle for reference.\n\n  :p - A vector mapping position on the puzzle to piece ID.\n  :o - A vector mapping piece ID to orientation vector.\n\n  An orientation vector describes the orientation of a piece based on how the\n  axes are permuted. For example [2 1 3 0] describes a cycle of the zeroth,\n  third, and second axes (with the first axis fixed).\n\n  0: w/y (white/yellow)\n  1: r/o (red/orange)\n  2: b/g (blue/green)\n  3: v/m (violet/magenta = purple/pink)\n\n  This format is identical to pentaquark394's, except that all four corner axes\n  stickers are included in the orientation description. They are, in order:\n  W - 'inside' front\n  Y - 'outside' back if positive handedness; 'inside' back if negative\n  Z - 'outside' front\n  X - 'inside' back if positive handedness; 'outside' back if negative","~:tag","~$cljs.core/IMap"],"~$sticker-chars",["^ ","^5","~$scrambler.puzzle.core/sticker-chars","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",34,"^@",1,"^A",34,"^B",19,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",34,"^@",6,"^A",34,"^B",19],"^D","A vector of vectors, mapping an axis (0-3) and a value along that axis (0-1)\n  to a single character representing a sticker color.","^E","~$cljs.core/IVector"],"~$get-piece-axis-value",["^ ","~:protocol-inline",null,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",40,"^@",7,"^A",40,"^B",27,"~:arglists",["~#list",["~$quote",["^M",[["~$piece-id","~$axis"]]]]],"^D","Return a single integer (0 or 1) corresponding to the value of the piece\n  along a given axis (0-3)."],"^5","~$scrambler.puzzle.core/get-piece-axis-value","~:variadic",false,"^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^B",27,"~:method-params",["^M",[["^O","^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^@",1,"^?",40,"^A",40,"~:max-fixed-arity",2,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O","^P"]]]]],"^D","Return a single integer (0 or 1) corresponding to the value of the piece\n  along a given axis (0-3)."],"~$get-piece-axis-values",["^ ","^K",null,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",46,"^@",7,"^A",46,"^B",28,"^L",["^M",["^N",["^M",[["^O"]]]]],"^D","Returns a vector of integers, where each index is an axis and each value\n  coresponds to the color on that axis (either 0 or 1)."],"^5","~$scrambler.puzzle.core/get-piece-axis-values","^R",false,"^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^B",28,"^S",["^M",[["^O"]]],"^T",null,"^U",["^M",[null,null]],"^@",1,"^?",46,"^A",46,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^D","Returns a vector of integers, where each index is an axis and each value\n  coresponds to the color on that axis (either 0 or 1)."],"~$get-piece-string",["^ ","^K",null,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",52,"^@",7,"^A",52,"^B",23,"^L",["^M",["^N",["^M",[["^O"]]]]]],"^5","~$scrambler.puzzle.core/get-piece-string","^R",false,"^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^B",23,"^S",["^M",[["^O"]]],"^T",null,"^U",["^M",[null,null]],"^@",1,"^?",52,"^A",52,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^O"]]]]]],"~$handedness",["^ ","^K",null,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",61,"^@",7,"^A",61,"^B",17,"^L",["^M",["^N",["^M",[["^O"]]]]],"^D","Returns 1 or -1 depending on the 'handedness' of a piece.\n\n  Unlike pentaquark394's implementation, we determine the handedness of a piece\n  by looking at whether the sum of a piece's stickers (each either 0 or 1) is\n  even or odd.\n\n  Pentaquark394's explanation:\n\n  Since some pieces like wogm are mirror images of wrbv if we don't distinguish\n  color pairs, their clockwise/counterclockwise orientations are switched.\n\n  To take account of this, we have to keep track of the 'handedness' of each\n  piece."],"^5","~$scrambler.puzzle.core/handedness","^R",false,"^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^B",17,"^S",["^M",[["^O"]]],"^T",null,"^U",["^M",[null,null]],"^@",1,"^?",61,"^A",61,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^D","Returns 1 or -1 depending on the 'handedness' of a piece.\n\n  Unlike pentaquark394's implementation, we determine the handedness of a piece\n  by looking at whether the sum of a piece's stickers (each either 0 or 1) is\n  even or odd.\n\n  Pentaquark394's explanation:\n\n  Since some pieces like wogm are mirror images of wrbv if we don't distinguish\n  color pairs, their clockwise/counterclockwise orientations are switched.\n\n  To take account of this, we have to keep track of the 'handedness' of each\n  piece."],"~$get-corner-twist",["^ ","^K",null,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",79,"^@",7,"^A",79,"^B",23,"^L",["^M",["^N",["^M",[["~$puzzle","^O"]]]]],"^D","Returns -1 (CCW), 0 (no twist), or 1, representing how a corner is twisted.\n\n  This algorithm is copied from pentaquark394's program."],"^5","~$scrambler.puzzle.core/get-corner-twist","^R",false,"^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^B",23,"^S",["^M",[["^13","^O"]]],"^T",null,"^U",["^M",[null,null]],"^@",1,"^?",79,"^A",79,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^13","^O"]]]]],"^D","Returns -1 (CCW), 0 (no twist), or 1, representing how a corner is twisted.\n\n  This algorithm is copied from pentaquark394's program."],"~$get-corner-twist-sum",["^ ","^K",null,"^C",["^ ","^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^?",92,"^@",7,"^A",92,"^B",27,"^L",["^M",["^N",["^M",[["^13"]]]]],"^D","Returns the sum of all twisted corners. See get-corner-twist."],"^5","~$scrambler.puzzle.core/get-corner-twist-sum","^R",false,"^>","/home/andy/.boot/cache/tmp/home/andy/Dropbox/4D Cubing/Physical/2x2x2x2-Scrambler/iv1/r3nb31/scrambler/puzzle/core.cljc","^B",27,"^S",["^M",[["^13"]]],"^T",null,"^U",["^M",[null,null]],"^@",1,"^?",92,"^A",92,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^13"]]]]],"^D","Returns the sum of all twisted corners. See get-corner-twist."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:o","~:p"]],"~:order",["~:p","~:o"]],"^D",null]